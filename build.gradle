import java.text.SimpleDateFormat

plugins {
    id 'org.screamingsandals.plugin-builder' version "${SCREAMING_PLUGIN_BUILDER_VERSION}" apply false
    id 'org.screamingsandals.nms-mapper' version "${NMS_MAPPER_VERSION}" apply false
    id 'com.github.gmazzo.buildconfig' version "${BUILDCONFIG_VERSION}" apply false
}

allprojects {
    group = 'org.screamingsandals.bedwars'
    version = BEDWARS_VERSION
}

if (version.toString().endsWith('-SNAPSHOT')) {
    defaultTasks 'clean', 'screamCompile'
} else {
    defaultTasks 'clean', 'screamCompile', ':BedWars-API:allowJavadocUpload'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.screamingsandals.plugin-builder'

    enableShadowPlugin()

    configurations.all {
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    repositories {
        mavenLocal()
        maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/'  }
        maven { url 'https://repo.onarandombox.com/content/groups/public'  }
        maven { url 'https://ci.frostcast.net/plugin/repository/everything'  }
        maven { url 'https://repo.codemc.org/repository/maven-public/'  }
        maven { url 'https://repo.alessiodp.com/releases/'  }
        maven { url 'https://jitpack.io' }
    }

    shadowJar {
        relocate 'com.zaxxer', 'org.screamingsandals.bedwars.lib.HikariCP'
        relocate 'org.screamingsandals.simpleinventories', 'org.screamingsandals.bedwars.lib.sgui'
        relocate 'org.screamingsandals.lib.utils.Wrapper', 'org.screamingsandals.bedwars.api.utils.Wrapper'
        relocate 'org.screamingsandals.lib', 'org.screamingsandals.bedwars.lib'
        relocate 'org.bstats', 'org.screamingsandals.bedwars.lib.ext.bstats'
        relocate 'io.papermc.lib', 'org.screamingsandals.bedwars.lib.ext.paperlib'
        relocate 'org.spongepowered.configurate', 'org.screamingsandals.bedwars.lib.ext.configurate'
        relocate 'org.yaml.snakeyaml', 'org.screamingsandals.bedwars.lib.ext.snakeyaml'
        relocate 'com.google.gson', 'org.screamingsandals.bedwars.lib.ext.gson'
        relocate 'com.typesafe.config', 'org.screamingsandals.bedwars.lib.ext.typesafe'
        relocate 'io.leangen.geantyref', 'org.screamingsandals.bedwars.lib.ext.geantyref'
        relocate 'net.kyori', 'org.screamingsandals.bedwars.lib.ext.kyori'
        relocate 'org.checkerframework', 'org.screamingsandals.bedwars.lib.ext.checkerframework'
        relocate 'cloud.commandframework', 'org.screamingsandals.bedwars.lib.ext.cloud'
        relocate 'me.lucko.commodore', 'org.screamingsandals.bedwars.lib.ext.commodore'

        if (System.getenv('BUILD_NUMBER') != null) {
            archiveClassifier.set(System.getenv('BUILD_NUMBER'))
        } else {
            archiveClassifier.set('dev')
        }
    }

    sourceCompatibility = '11.0'

    if (System.getenv("OPTIMIZE_FOR_CI_CD") != null) {
        project.tasks.withType(PublishToMavenRepository).all { task ->
            task.doLast {
                var m = AbstractPublishToMaven.class.getDeclaredMethod("getMavenPublishers")
                m.setAccessible(true)
                var publishers = m.invoke(task)
                var f = publishers.getClass().getDeclaredField("timeProvider")
                f.setAccessible(true)
                var timeProvider = f.get(publishers)
                var utcDateFormatter = new SimpleDateFormat("yyyyMMdd.HHmmss")
                utcDateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"))
                var currentTime = new Date(timeProvider.getCurrentTime())
                println "The artifact is probably saved with this time: " + utcDateFormatter.format(currentTime)
            }
        }
    }
}
