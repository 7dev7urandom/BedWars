package org.screamingsandals.bedwars.commands;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import lombok.Data;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.ComponentBuilder;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.TextComponent;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.screamingsandals.bedwars.Main;
import org.screamingsandals.bedwars.premium.PremiumBedwars;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

import static org.screamingsandals.bedwars.lib.lang.I.i18n;

public class DumpCommand extends BaseCommand {

    public DumpCommand() {
        super("dump", ADMIN_PERMISSION, true, false);
    }

    @Override
    public boolean execute(CommandSender sender, List<String> args) {
        var client = HttpClient.newHttpClient();

        var gson = new GsonBuilder().setPrettyPrinting().create();
        var map = new HashMap<>();
        map.put("bedwars", Map.of(
                "version", Main.getVersion(),
                "build", Main.getInstance().getBuildInfo(),
                "edition", PremiumBedwars.isPremium() ? "premium" : "free"
        ));
        map.put("server", Map.of(
                    "version", Bukkit.getVersion()
                // TODO: some useful information about servers
                ));
        // TODO: worlds
        var pluginList = new ArrayList<>();
        Arrays.stream(Bukkit.getPluginManager().getPlugins()).forEach(plugin -> pluginList.add(plugin.getDescription()));
        map.put("plugins", pluginList);
        // TODO: arena dump
        // TODO: add config file, censor secrets
        // TODO: all shop files

        client.sendAsync(HttpRequest.newBuilder()
                .uri(URI.create("https://api.paste.gg/v1/pastes"))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(new Gson().toJson(Map.of(
                        "name", "Bedwars dump",
                        "description", "Dump generated by ScreamingBedwars plugin",
                        "visibility", "unlisted",
                        "expires", LocalDateTime.now().plusDays(30).format(DateTimeFormatter.ofPattern("YYYY-MM-dd'T'HH:mm:ss'Z'")),
                        "files", List.of(Map.of(
                                "name", "dump.json",
                                "content", Map.of(
                                        "format", "text",
                                        "highlight_language", "json",
                                        "value", gson.toJson(map)
                                )
                        ))
                )))).build(), HttpResponse.BodyHandlers.ofString())
                .thenAccept(stringHttpResponse -> {
                    if (stringHttpResponse.statusCode() >= 200 && stringHttpResponse.statusCode() <= 299) {
                        var message = gson.fromJson(stringHttpResponse.body(), Message.class);
                        if (Main.isSpigot()) {
                            var msg1 = new TextComponent("https://paste.gg/" + message.getResult().getId());
                            msg1.setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://paste.gg/" + message.getResult().getId()));
                            msg1.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ComponentBuilder().append("Open this link").create()));

                            sender.spigot().sendMessage(new ComponentBuilder()
                                    .append(TextComponent.fromLegacyText(i18n("dump_success") + ChatColor.GRAY))
                                    .append(msg1)
                                    .create());
                        } else {
                            sender.sendMessage(i18n("dump_success") + ChatColor.GRAY + "https://paste.gg/" + message.getResult().getId());
                        }
                    } else {
                        sender.sendMessage(i18n("dump_failed"));
                    }
                });

        return true;
    }

    @Override
    public void completeTab(List<String> completion, CommandSender sender, List<String> args) {

    }

    @Data
    public static class Message {
        private Result result;
    }

    @Data
    public static class Result {
        private String id;
    }
}
